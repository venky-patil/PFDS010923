Strings
=======

--> String is collection/Sequence of character either in Single Quotes 
    or Double Quotes or Triple Quotes.
--> Strings are Immutable(Unchangeable).
--> String is a ordered collection of Character(Indexing is important in case of String).
--> Space is also considered as a part of a String.

Example:
=========

x = 'Hi How are You'
x = 'Bye'
x = "Hi Good Evening"
x = '''Good Afternoon'''
x = '1'
x = "10.5"
x = "10+20j"
x = "True"

How to Define Multiline Characters in Strings?
=================================================
--> If we want to represent a string multiple lines then we need to use Triple Quoatation.

Example:
========
x = """Edyoda
    Digital
    University"""
print(x)

How to Access the Character of a String?
=========================================
There are Two Ways for Accessing the Characters/Substring from a String:

1.Indexing 
2.Slicing

Indexing in Python
===================
--> With the help of Indexing we can access a single Charcter of a String.

Syntax:
=======

string_name[index_number]

Types of Indexing in Python
=============================
1.Positive Indexing  --> Left to Right  --> Forward Direction  --> First index is 0. 
2.Negative Indexing  --> Right to Left  --> Backward Direction --> First index is -1.

Example:
========

string1 = "Good Evening I Hope Everything is Going Well"
print(string1[-5])  #""
print(string1[7]) #e
print(string1[-4]) #W
print(string1[9]) #i 
print(string1[-17])#i
print(string1[25])#t
print(string1[100]) #Error

Note 
=====
--> In Case of Indexing if the Given index is not present then indexing will given 
    indexing error.

Slicing in Python
==================
--> Slicing means accessing the piece(Substring) of a String.

Syntax of Slicing:
==================

string_name[begin_index:end_index:step]

Types of Slicing
=================
1.Positive Direction --> Forward Direction --> Left to Right 
2.Negative Direction --> Backward Direction --> Right to Left 

Note:
=====
In Case of Slicing Direction will be determined with the help of step value if 
step value is Positive that means we need to perform Forward Slicing and if 
step value is negative  then we need to perform Backward Slicing.

Positive Slicing:
=================
Syntax: 

string_name[begin_index:end_index:step]

Begin_index(Optional) --> From where we have to consider a Slice --> Default value is 0.

End_Index(Optional) --> Till which index we want slicing --> Default value is length of that String.

Step(Gap)(Optional) --> Characters that we need to skipped --> Default Value is 1

Note
====
--> If the step value is positive then only we can perform Positive slicing.
--> End will always go till end-1.

Example of Positive Slicing
=============================

string1 =  "Good Evening"
print(string1[0:12:1]) #Good Evening 
print(string1[::]) #Good Evening --> string1[0:12:1]
print(string1[2:10:3]) #oem
print(string1[4:8:3])# e 
print(string1[76:9:22])#empty string
print(string1[::0]) #Error
print(string1[87:54:23]) #empty string
print(string1[-10:-1:2])#o vnn 
print(string1[-1:-10:5])#empty string
print(string1[-8:-2:3])#e


Note
====
--> In Case of Positive as well as Negative Slicing we will never get an error.if the 
given index or step value is not present then also you will get output as empty
string.

--> The only possibility of error in case of slicing is if we are giving step value as 
    0.


Negative Slicing:
=================
Syntax: 

string_name[begin_index:end_index:step(Negative)]

Begin_index(Optional) --> From where we have to consider a Slice --> Default value is -1.

End_Index(Optional) --> Till which index we want slicing --> Default value is -(length of that String + 1).

Step(Gap) --> Characters that we need to skipped 

Note
====
--> If the step value is negative then only we can perform Negative slicing.
--> End will always go till end+1.

Example of Negative Slicing
=============================

string1 =  "Good Evening"
print(string1[::-1]) #gninevE doog --> string1[-1:-13:-1]
print(string1[-1:-10:-5]) #gv
print(string1[10:4:-2]) #nnv
print(string1[-4::-3])# nEo
print(string1[-9:-1:-5])#empty string
print(string1[-1:-4:-5]) #g
print(string1[-100:-2:-2])#empty string
print(string1[-20:-2:0])#Error

Note
====
--> In Case of Positive as well as Negative Slicing we will never get an error.if the 
given index or step value is not present then also you will get output as empty
string.

--> The only possibility of error in case of slicing is if we are giving step value as 
    0. 


Operators Used with Strings
============================

There are Few Operators that we can use with strings:

1.Arithmetic Operator(+,*)
2.Membership Operator(in and not in)
3.Identity Operators(is and is not)
4.Logical Operator(and or and not)
5.Comparison Operator(<,>,<=,>=,==,!=)

Arithmetic Operator:
=====================
1.Concatenation Operator(+) 
=============================
--> Concatenation Operator is used to join two strings together.

Example of Concatenation Operator(+):
=====================================
string1 = "Hi How are You "
string2 = "I Hope Everything is Going Well"
print(string1+string2)  # Hi How are You I Hope Everything is Going Well

Note
====
--> If we are using + Operator with string then it is mandatory that both the 
arguments must be string type of only.


2.Repitition Operator(*)
===========================
--> This operator is used to repeat a string n number of Times.

Example of Repitition Operator
===============================
String1 = "Hi How are You"
print(String1*5)#Hi How are YouHi How are YouHi How are YouHi How are YouHi How are You

Note
====
--> If we are using * operator with string then it is mandatory that one of the 
argument must of string type and second argument must be of integer type.

Membership Operator(in and not in):
=====================================
string1 = "Python is a High Level Programming Language"
print("P" in string1) #True 
print("Python" in string1) #True 
print("p" in string1) #False
print("Java" not in string1) #True


Identity Operators(is and is not):
===================================

string1 = "Python1"
string2 = "Python2"
string3 = "Python1"
print(string1 is string2) #False
print(string2 is string3) #False
print(string1 is not string3)#False
print(string1 is not string2)#True
print(string1 is string3)#True

Logical Operator(or and not):
=============================

x and y --> if x evalutes to False then x will be the answer else  y.

x or y --> if x evalutes to True then x will be the answer else y.

not x --> Reverse 

"" --> False

Example of Logical Operators:
==============================

print("Hi" and "Hello")#Hello
print("" and "How are you") #Empty 
print("Python" or "Java") #Python
print("0" or "Java") #0
print(not "") #True 
print(not "Hi") #False

5.Comparison Operator(<,>,<=,>=,==,!=)
========================================
--> Comparison Operator will always compare the Characters of the String Based on the 
    Ascii Values.

Example of Comparison Operator 
===============================

String1 = "Python"
String2 = "python"
print(String1<String2)
print(String1>String2)

Inbuilt Functions For Strings:
===============================

1.Strip() Functions
=====================
--> This Function is used to remove extra whitespace in your String.

Syntax:
 
    string_name.strip()

Example of Strip Function
===========================

string1 = "             Python    is     Good                       "
print(string1.strip())#Python    is     Good

Note
====
--> In case of Strip Function only the spaces which are present in right hand side 
    and left hand side will be remove no any space will be removed in between the characater.


2.Find Function
================
--> This function is used to return the first occurance of the given substring if the 
    substring is present then find function will return the first index of that 
    substring and if the substring is not present then this function will return -1.

Syntax:

    string_name.find(substring,begin_index,end_index)

Begin_index is Optional --> Default value will be 0
End_index is also optional --> Default value is length of the string.

Example of Find Function
==========================

string1 = "Learning Python is Easy and Python is Simple"
print(string1.find("Python"))#9
print(string1.find("Python",0,15))#9 
print(string1.find("Python",15,20))#-1
print(string1.find("Java"))#-1
print(string1.find("Python"))#9
print(string1.find("python"))#-1


3.Index Function
================
--> This function is used to return the first occurance of the given substring if the 
    substring is present then index function will return the first index of that 
    substring and if the substring is not present then this function will return Value Error.

Syntax:

    string_name.index(substring,begin_index,end_index)

Begin_index is Optional --> Default value will be 0
End_index is also optional --> Default value is length of the string.

Example of Index Function
==========================

string1 = "Learning Python is Easy and Python is Simple"
print(string1.index("Python"))#9
print(string1.index("Python",0,15))#9 
print(string1.index("Python",15,20))#Error
print(string1.index("Java"))#Error
print(string1.index("Python"))#9
print(string1.index("python"))#Error

4.upper() Function
================
--> This function is used to convert whole string into Upper Case.

Syntax:

string.upper()

Example of upper() Function:
=============================

string1 = "Learning Python is Easy and Python is Simple"
print(string1.upper()) #LEARNING PYTHON IS EASY AND PYTHON IS SIMPLE


5.lower() Function
================
--> This function is used to convert whole string into lower Case.

Syntax:

string.lower()

Example of lower() Function:
=============================

string1 = "Learning Python is Easy and Python is Simple"
print(string1.lower()) #


6.Title Function
=================
--> This function used to convert first letter of each word in Upper Case

Syntax:

string.title()

Example of title() Function:
=============================

string1 = "Learning python is easy and python is simple"
print(string1.title()) ##Learning Python Is Easy And Python Is Simple


7.Capitalize() Function
=========================
--> This function used to convert first letter of the string in upper case

Syntax:

string.capitalize()

Example of capitalize() Function:
=================================

string1 = "learning Python is easy and Python is simple"
print(string1.capitalize()) #Learning Python is easy and Python is simple.

8.isupper() Function
=====================
--> This function will return True if all characters of the given string is in upper
    case Else this function will return False.

Syntax:

string_name.isupper()

Example of isupper() Function
==============================

string1 = "learning Python is easy and Python is simple"
print(string1.isupper()) #False 


9.islower() Function
=====================
--> This function will return True if all characters of the given string is in lower
    case Else this function will return False.

Syntax:

string_name.lower()

Example of islower() Function
==============================

string1 = "learning Python is easy and Python is simple"
print(string1.islower()) #False 


10. isalpha() Function
======================

--> This function will return True if all characters of the given string are alphabets
    Else this function will return False.

Syntax:

string_name.isalpha()

Example of isalpha() Function
==============================

string1 = "learningPythoniseasyandPythonissimple"
print(string1.isalpha()) #True

11. isnumeric() Function
======================

--> This function will return True if all characters of the given string are numbers
    Else this function will return False.

Syntax:

string_name.isnumeric()

Example of isnumeric() Function
==============================

string1 = "123"
print(string1.isnumeric()) #True


12.count() Function
====================
--> This function is used to  return the count of the given substring.

Syntax:

string_name.count(substring,begin_index,end_index)

Begin_index is Optional --> Default value will be 0
End_index is also option --> Default value is length of the string.

Example of count() Function
============================
string1 = "Python is easy to Learn and Python is also a High Level Programming Language"
print(string1.count("Python"))#2 
print(string1.count("is",0,9))#1 
print(string.count("is",9,12))#0
print(string1.count("P"))#3

13.Replace() Function
======================
--> This function is used to replace all the occurance of the old substring to the 
    new substring 
--> It is similar to find and replace.

Syntax:

string_name.replace(old_string,new_string)

Example of Replace Function
============================

string1 = "Python is easy to Learn and Python is also a High Level Programming Language"
string2 = string1.replace("Python","Java")
print(string2) #
string3 = string1.replace("easy","difficult")
print("string3)

14.Split() Function
===================
--> This Function is used to convert a String into a list seperated by a seperator.

Syntax:

string_name.split()

Example of Split() Function
============================

string1 = "Learning Python is Easy" 
print(string1.split()) #['Learning', 'Python', 'is', 'Easy']

print(string1.split("e")) #['L', 'arning Python is Easy']

string2 = "ashu@gmail.com"
print(string2.split("@")) #["ashu","gmail.com"]

string1 = "Learning Python is Easy" 
print(string1.split("Python")) #["Learning"," is Easy"]

15.Join() Function
===================
--> This Function is used to convert a given List into a String.

Syntax:

delimiter.join(list_name)

Example of Join Function:
==========================

list1 = ["Learning","Python","is","Easy"]
print(" ".join(list1))#"Learning Python is Easy"

list1 = ["Learning","Python","is","Easy"]
print("#".join(list1))#"Learning#Python#is#Easy"

list1 = ["Learning","Python","is","Easy"]
print("99".join(list1))#"Learning99Python99is99Easy"

list1 = ["Learning","Python","is","Easy"]
print(",".join(list1))#"Learning,Python,is,Easy"


list1 = ["Learning","Python","is","Easy"]
print("".join(list1))#"LearningPythonisEasy"

16.input() Function
=====================
--> This Function is used to take inputs from the end user.
--> This Function will considered everything in the form of string.

Syntax:
  
  input()

Example of input() Function
=============================

string1 = input("Enter a String :")
string2 = input("Enter Second String :")
print("Concatenation of Both the Strings is :",string1+string2)


ASCII/UNICODE VALUES
=======================

--> According to American Standard Coding Information Interchange Each and Every Character 
    of the Programming Languages are associated with a specific integer values those 
    values are known as Ascii Values.

--> Each and every Character is associated/having its own unique integer value.

Table of Ascii Values
=======================

Characters                                 Integer Value
==========                                ================

A                                               65
B                                               66
C                                               67
D                                               68
...
...
...
Z                                               90


a                                               97
b                                               98
c                                               99
d                                               100
....
....
....
z                                                122 


0                                                48
1                                                49
2                                                50
3                                                51
4                                                52
5                                                53
6                                                54
7                                                55
8                                                56
9                                                57

17. ord() Function
====================
--> This Function is used to get the ascii value of any Character. 
--> ord Function will only take one character at a time.

Syntax: 

ord(Charcter)

Example of Ord() Function 
===========================

print(ord("a"))#97 
print(ord("%")) #37
print(ord("0")) #48 
print(ord("#")) #35
print(ord(" ")) #32

18.Chr() Function 
==================
--> This Function is used to return the Character Value which is associated with  
    an integer.

Syntax:

chr(Ascii_Value)

Example of Chr() Function
===========================

print(chr(97))#a 
print(chr(32))# 
print(chr(35))##
print(chr(65))#A
print(chr(49))#1

19.Sorted Function
===================
--> This Function is used to Sort a Given String.
--> Sorting will be done based on Ascii Values.
--> This Function will always return the output in the form of list. 
--> We can sort either in ascending order or descending order.

Syntax:

sorted(string_name)


Example of Sorted Function:
============================

Numbers --> 48 to 57
Upper Case Alphabets --> 65 to 90 
Lower Case Alphabets --> 97 to 122

string1 = "123Ara"
print(sorted(string1))#['1','2','3','A','a','r']

string1 = "123Ara"
print(sorted(string1,reverse=True))#['r','a','A','3','2','1']


20.isalnum() Function 
======================
--> This Function will return True if all the characaters of the given string is in 
the form of alphabets as well as Numbers else this function will return False.

Syntax:

string_name.isalnum()

Example of isalnum() Function 
================================

string1 = "124HihOWAREYOU"
print(string1.isalnum())#True 



