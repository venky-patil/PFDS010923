List 
=====
--> List is a collection of Dissimilar objects/Elements.
--> Duplicates are allowed in case of List.
--> Square brackets are used to represent a list.
--> List are mutable in Nature(We can perform changes in list)
--> List is a ordered collection of Elements(Indexing is possible in case of List).

Creation of List objects
=============================
--> for Empty List : 
                    l = []
                    l = list()

--> If we know the Elements:

                    l = [10,20,30,40,50,60]

Example of List Creation 
==========================

list1 = []
print(type(list1))
list2 = list()
print(type(list2))
list3 = [10,20,30,40,50]
print(type(list3))

How we can access an Element of a List.
=========================================

--> There are Two ways to Access an Element of a List:

1.Indexing 
2.Slicing

Indexing in Python
===================
--> With the help of Indexing we can access an Elements of a List.

Syntax:
=======

List_name[index_number]

Types of Indexing in Python
=============================
1.Positive Indexing  --> Left to Right  --> Forward Direction  --> First index is 0. 
2.Negative Indexing  --> Right to Left  --> Backward Direction --> First index is -1.

Example of Indexing in Python:
==============================

list1 =[10,20,30,40,50,60,70]
print(list1[-5])  #30
#print(list1[7]) #Error
print(list1[-4]) #40
print(list1[9]) #Error 
print(list1[-17])#Error
print(list1[25])#Error
print(list1[100]) #Error
print(list1[-1])#70

Note 
=====
--> In Case of Indexing if the Given index is not present then indexing will give an 
    indexing error.

Slicing in Python
==================
--> Slicing means accessing the group of elements from a List.

Syntax of Slicing:
==================

List_name[begin_index:end_index:step]

Types of Slicing
=================
1.Positive Direction --> Forward Direction --> Left to Right 
2.Negative Direction --> Backward Direction --> Right to Left 

Note:
=====
In Case of Slicing Direction will be determined with the help of step value if 
step value is Positive that means we need to perform Forward Slicing and if 
step value is negative  then we need to perform Backward Slicing.

Positive Slicing:
=================
Syntax: 

list_name[begin_index:end_index:step]

Begin_index(Optional) --> From where we have to consider a Slice --> Default value is 0.

End_Index(Optional) --> Till which index we want slicing --> Default value is length of that list.

Step(Gap)(Optional) --> Characters that we need to skipped --> Default Value is 1

Note
====
--> If the step value is positive then only we can perform Positive slicing.
--> End will always go till end-1.

Example of Positive Slicing
=============================

list1 =  ["Learning","Python","is","Easy","and","Simple"]

print(list1[0:6:1])  #["Learning","Python","is","Easy","and","Simple"]
print(list1[::]) #["Learning","Python","is","Easy","and","Simple"]
print(list1[2:10:3])#['is','simple']
print(list1[4:8:3])# ['and']
print(list1[76:9:22])#[]
print(list1[::0]) #Error
print(list1[87:54:23]) #[]
print(list1[-10:-1:2])#["Learning","is","and"]
print(list1[-1:-10:5])#[]
print(list1[-8:-2:3])#["Learning","Easy"]
print(list1[-99:5:2])#["LearninG","is","and"]
print(list1[-100:100:4])#['Learning','and']

Note
====
--> In Case of Positive as well as Negative Slicing we will never get an error.if the 
given index or step value is not present then also you will get output as empty
list.

--> The only possibility of error in case of slicing is if we are giving step value as 
    0.

--> If we can move in the given direction and the starting index and ending 
    index is not given then default start and end index will be considered.


Negative Slicing:
=================
Syntax: 

list_name[begin_index:end_index:step(Negative)]

Begin_index(Optional) --> From where we have to consider a Slice --> Default value is -1.

End_Index(Optional) --> Till which index we want slicing --> Default value is -(length of that list + 1).

Step(Gap) --> Characters that we need to skipped 

Note
====
--> If the step value is negative then only we can perform Negative slicing.
--> End will always go till end+1.

Example of Negative Slicing
=============================

list1 =  ["Learning","Python","is","Easy","and","Simple"]
print(list1[::-1]) #['Simple', 'and', 'Easy', 'is', 'Python', 'Learning']
print(list1[-1:-10:-5]) #['Simple','Learning']
print(list1[10:4:-2]) #['Simple']
print(list1[-4::-3])#['is']
print(list1[-9:-1:-5])#[]
print(list1[-1:-4:-5]) #['String']
print(list1[-100:-2:-2])#[]
print(list1[-20:-2:0])#Error
print(list1[-1:-9:-2])
print(list1[-99:-10:-3])#[]
print(list1[-3:-99:-2])#['Easy','Python']
print(list1[:-1:-2])#[]
print(list1[-2:-1:-2])#[]
print(list1[-2:-2:-2])#[]
print(list1[-3:-2:-1])#[]
print(list1[-5:-3:-1])#[]
print(list1[-3:-5:-1])#["Easy","is"]
print(list1[-400:-5:-1])#[]


Note
====
--> In Case of Positive as well as Negative Slicing we will never get an error.if the 
given index or step value is not present then also you will get output as empty
string.

--> The only possibility of error in case of slicing is if we are giving step value as 
    0. 

Important Note Related to Positive and Negative Slicing:
===========================================================

-->  In Case of Negative Slicing(Backward Direction) if we are not giving end value 
     or the end index is not present then Python will consider default end value(-(Len+1)) 
     for the same .

--> In Case of Positive Slicing(Forward Direction) if we are not giving end value 
    or the given end index is not present then Python will consider default end 
    value ((len(list))) for the same.

--> In Case of Positive Slicing if the start index is not present and the index value 
    is negative then default value which is -len+1 will be considred.

Builtin Function in List
=========================

1.len() Function
=================

--> This function is used to return The Number of Elements present in the given list.

Syntax:

len(list_name)

Example of len() Function 
==========================

list1 = [10,20,30,40,(10,20),50]
print(len(list1))#6

list1 = []
print(len(list1))#0

2.Count() Function 
===================
--> This Function is used to return the Number of occurances of a Particular Element.

Syntax:

list_name.count(element)


Example of Count() Function
============================

list1 = [10,20,30,10,20,30,40,10,20,40,304,40]
print(list1.count(10))#3
print(list1.count(40))#3
print(list1.count(304))#1 
print(list1.count(1000))#0

3.index() Function 
===================

--> This function is used to return the index value of first occurance of the 
    given element and if the element is not present then index function will give you 
    an Error. 

Syntax:

list_name.index(element)

Example of Index() Function 
============================

list1 = [10,20,30,10,30,40,"Hello","World"]
print(list1.index("Hello"))#6
print(list1.index(40))#5 
print(list1.index(30))#2 
print(list1.index(100))#Value Error

4.reverse() Function
======================
--> This Function is used to reverse the Elements of the Given List. 

Syntax:

list_name.reverse()

Example of reverse Function()
==============================

list1 = [10,20,30,40,50,70]
list1.reverse()
print(list1) #[70,50,40,30,20,10]


Insertion Functions of List
==============================
--> In Python if you want to insert elements in the given list then for that 
    we are having three function:

1.append() Function 
2.insert() Function 
3.extend() Function


5.append() Function 
====================
--> This Function is used to add an element inside a list at the last position.
--> This append function will only add a single object into a list.

Syntax:
list_name.append(data)

Example of Append() Function 
=============================
list1 = []
list1.append("Python") #["Python"]
list1.append("Java") #["Python","Java"]
list1.append("C++") #["Python","Java","C++"]
list1.append("JavaScript") #["Python","Java","C++","JavaScript"]
list1.append(" ")
list1.append(10)
list1.append(10.5)
list1.append(True)
list1.append(10+20j)
list1.append([10,20,30])
print(list1)

6.insert() Function 
====================

--> This Function is used to insert a given element in the list at a particular position 
    (Index).

--> In Case of insert Function if the given index value is positive and that index 
    is not present in the given list then the element will be added at last position 

--> In Case of insert Function if the given index value is Negative and that index 
    is not present in the given list then the element will be added at first position 


Syntax:

list_name.insert(index_value,data)

Example of insert() Function 
=============================

list1 = [10,20,30,40,50,60]
list1.insert(1,2000)#[10,2000,20,30,40,50,60]
list1.insert(0,1000)#[1000,10,2000,20,30,40,50,60]
list1.insert(100,300)#[1000,10,2000,20,30,40,50,60,100,300]
list1.insert(-200,400)#[400,1000,10,2000,20,30,40,50,60,100,300]
print(list1)#[400,1000,10,2000,20,30,40,50,60,100,300]



7.extend() Function 
====================
--> This function is used to add multiple elements inside a list.
--> This Function will always take Sequence datatype(list,tuple,set,string,dictionary)

Syntax:

first_list_name.extend(object)

Example of Extend Function 
===========================

list1 = [10,20,30,40,50]
list2 = [90,80,70]
list1.extend(list2)
print(list1)#[10,20,30,40,50,90,80,70]


Append Vs Extend Vs Insert 
============================

--> Append function we will use if we want to an element at the last position 

--> Append will take only a single object at a time. 

--> Extend Function is used to add multiple elements from  sequence datatype to 
    an existing list at the last position.

--> Extend will take only list,set,tuple,dict and string other than this we are giving 
    anything else then extend will raise and error. 

--> Insert Function is used to add an element at a particular position(Index).

--> Insert will add a single element at a particular index.




Deletion Function of List 
===========================
--> In Case of list we are having three function for deleting an element from a list.

1.pop() function
2.pop(argument) Function 
3.remove() Function


8.Pop() Function Without Argument 
===================================
--> This Function will delete the last element of the given list and also this 
    function will return the deleted element.

--> In Case pop function if the list is empty then pop function will give you an error.

Syntax:

list_name.pop()

Example of Pop Function Without Argument 
==========================================

list1 = ['Simple', 'and', 'Easy', 'is', 'Python', 'Learning']
print(list1.pop())#'Learning'
print(list1)#['Simple', 'and', 'Easy', 'is', 'Python']

list2 = []
print(list2.pop()) #Error



9.Pop(index) Function With Argument 
====================================
--> This Function will delete the element which is present at the given index and also this 
    function will return the deleted element.

--> In Case pop function if the list is empty then pop function will give you an error.

--> In Case of pop function with argument if the given index value is not present 
    then pop with argument will give you an error

Syntax:

list_name.pop(index)

Example of Pop Function With Argument 
==========================================

list1 = ['Simple', 'and', 'Easy', 'is', 'Python', 'Learning']
print(list1.pop(2))#'Easy'
print(list1)#['Simple', 'and',  'is', 'Python','Learning']


list3 = ['Simple', 'and', 'Easy', 'is', 'Python', 'Learning']
print(list3.pop(200))#Error
print(list1)#['Simple', 'and',  'is', 'Python','Learning']

list2 = []
print(list2.pop()) #Error

10.Remove() Function
======================
--> This function is used to delete a particular value from the List.
--> This Function will return an Error if the Particular element which we want to delete 
    is not present in the Given List.
--> If we are having Duplicates elements in list then if we are using remove function 
    with that Duplicates value then only first occurance of that element will be deleted.

Syntax:

list_name.remove(data)

Example of Remove Function 
===========================
list1 = [10,20,30,40,50,60]
list1.remove(10)
print(list1)#[20,30,40,50,60]


# list2 = [10,20,30,40]
# list2.remove(100) #Error

list2 = [10,20,30,40,10,20,30]
list2.remove(20) 
print(list2)


11.Sorted() Function 
=====================
--> This Function is used to sort the given element of a list.
--> This function will always return answer in the form of list.
--> If we are using sorted function with list then it is mandatory that all the 
    element of that list must be of same datatype/Integer Datatype.
--> By Using Sorted Function we can sort either in Ascending Order or Descending Order. 
--> When we are using sorted function sorting will be done and it will create a new 
    object the sorting will not be done into the original list.

Syntax:

sorted(list_name)


Example of Sorted Function 
==========================
list1 = [98,23,84,23,124,573,1837]
print(sorted(list1))#[23, 23, 84, 98, 124, 573, 1837]
print(sorted(list1,reverse=True)) #[1837, 573, 124, 98, 84, 23, 23]

list2 = ["Java",10,"10.5",20.88]
print(sorted(list2))#Error

list2 = ["Java","Python","10.5"]
print(sorted(list2))#["10.5","Java","Pyton"]


12.Sort() Function 
=====================
--> This Function is used to sort the given element of a list.
--> This function will always return answer in the form of list.
--> If we are using sorted function with list then it is mandatory that all the 
    element of that list must be of same datatype/Integer Datatype.
--> By Using Sort Function we can sort either in Ascending Order or Descending Order. 
--> When we are using Sort Function then the sorting will be done into the original 
    list.

Syntax:

list_name.sort()


Example of Sort Function 
==========================
list1 = [98,23,84,23,124,573,1837]
list1.sort()
print((list1))#[23, 23, 84, 98, 124, 573, 1837]
list1.sort(reverse=True)
print(list1) #[1837, 573, 124, 98, 84, 23, 23]

list2 = ["Java",10,"10.5",20.88]
print(sorted(list2))#Error

list2 = ["Java","Python","10.5"]
print(sorted(list2))#["10.5","Java","Pyton"]


Operators Used with List
============================

There are Few Operators that we can use with List:

1.Arithmetic Operator(+,*)
2.Membership Operator(in and not in)
3.Identity Operators(is and is not)
4.Logical Operator(and or and not)
5.Comparison Operator(<,>,<=,>=,==,!=)

Arithmetic Operator:
=====================
1.Concatenation Operator(+) 
=============================
--> Concatenation Operator is used to join two List together.

Example of Concatenation Operator(+):
=====================================
list1 = [10,20,30,40,50]
list2 = [60,70,80,90,100]
print(list1+list2)  # [10,20,30,40,50,60,70,80,90,100]

Note
====
--> If we are using + Operator with list then it is mandatory that both the 
arguments must be list type of only.


2.Repitition Operator(*)
===========================
--> This operator is used to repeat  Elements of a list n Number of Times.

Example of Repitition Operator
===============================
list1 = [10,20,30]
print(list1*3)#[10,20,30,10,20,30,10,20,30]

Note
====
--> If we are using * operator with list then it is mandatory that one of the 
argument must of list type and second argument must be of integer type.

Membership Operator(in and not in):
=====================================

list1 = [10,20,30,"Java","Python","C","C++"]
print(10 in list1) #True 
print("Python" in list1) #True 
print("C" in list1) #True
print("Java" not in list1) #False


Identity Operators(is and is not):
===================================
--> List will always create a new object.Memory Utilization will not be done 
    in case of list.

list1 = [10,20,30]
list2 = [40,50,60]
list3 = [10,20,30]
print(list1 is list2) #False
print(list2 is list3) #False
print(list1 is not list3)#True
print(list1 is not list2)#True
print(list1 is list3)#False

Logical Operator(or and not):
=============================

x and y --> if x evalutes to False then x will be the answer else  y.

x or y --> if x evalutes to True then x will be the answer else y.

not x --> Reverse 

[] --> False

Example of Logical Operators:
==============================

print([] and [10,20,30])#[]
print([10,20,30] and []) #[]
print([10,20,30] and [10])#[10]
print([10,20] or []) #[10,20]
print([] or [10]) #[10]
print(not []) #True 
print(not [10,20,30]) #False

5.Comparison Operator(<,>,<=,>=,==,!=)
========================================
--> Comparison Operator will always compare the Elements of the Line one by one.

Example of Comparison Operator 
===============================

list1 = [10,20,30,40,50]
list2 = [40,50,60,70,80]
list3 = ["Java","Python"]
print(list1<list2) #True
print(list1>list2)#False
print(list1>list3) #Error

List vs Mutability 
===================
--> List is mutable in Nature that means we can perform changes in the existing list. 

Example:
========

list1 = [10,20,30,40,50]
print(list1,id(list1))
list1.append("Java")
list1.append("C++")
list1.append("Python")
print(list1,id(list1))

Sort Vs Sorted Function
========================

--> When we are using sorted Function the sorting will be done into the new object 
    that means sorted function will always create a new object.

--> When we are using Sort Function the sorting will be done into the original object 
    only no any new object will be created in case of sort function.


Explaination
==============

list1 = [98,34,42,13,53,1452,12,56]
print(list1)
print(id(list1))
print(id(sorted(list1)))
print(list1)

list1 = [98,34,42,13,53,1452,12,56]
print(list1)
print(id(list1))
list1.sort()
print(list1)

How to Change the Element of List 
===================================

Syntax:

list_name[index] = updated_value
 
Example:

list1 = [10,20,30,40,50]
print(id(list1))
list1[1] = 5000
print(id(list1))
print(list1)

Traversal Over List 
======================

--> Traversal means Visiting(Printing) Each and Every Element of the List.

1st Way
=======
By Using Len Function along with range Function(Index Value) 
==============================================================

list1 = ["Java","Python","C++","JavasScript","C","R"]

for i in range(len(list1)):
    print(list1[i])

2nd Way
=======
By Using Direct List Datatype
==============================================================

list1 = ["Java","Python","C++","JavasScript","C","R"]

for i in list1:
    print(i)


How to Take List as an Input?
===============================

--> By Using For loop 
--> By Using List Comphersion 
--> By Using Map Function 
--> By Using Eval Function

By Using For loop 
===================

num = int(input("Enter the Number of Elements of the List : "))
list1 = []
for i in range(num):
    ele = int(input("Enter Elements : "))
    list1.append(ele)
print(list1)



